#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Get the commit message
COMMIT_MSG=$(cat "$1")

echo "üìù Validating commit message..."

# Check for sensitive information in commit message
SENSITIVE_PATTERNS=(
  "password"
  "secret"
  "key"
  "token"
  "api_key"
  "private_key"
  "jwt_secret"
  "database_url"
  "smtp_pass"
  "stripe_key"
  "aws_key"
  "github_token"
)

for pattern in "${SENSITIVE_PATTERNS[@]}"; do
  if echo "$COMMIT_MSG" | grep -qi "$pattern"; then
    echo "‚ùå Commit message contains potentially sensitive information: $pattern"
    echo "üí° Please remove sensitive information from your commit message."
    echo "   Use generic descriptions instead (e.g., 'Update config' instead of 'Add API key')"
    exit 1
  fi
done

# Check commit message format (conventional commits)
if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|ci|build|perf|revert)(\(.+\))?: .+"; then
  echo "‚ö†Ô∏è  Commit message doesn't follow conventional commit format"
  echo "üí° Recommended format: type(scope): description"
  echo "   Examples:"
  echo "   - feat(auth): add JWT authentication"
  echo "   - fix(api): resolve database connection issue"
  echo "   - docs(readme): update installation instructions"
  echo "   - chore(deps): update dependencies"
  echo ""
  echo "   Types: feat, fix, docs, style, refactor, test, chore, ci, build, perf, revert"
  echo ""
  read -p "Continue anyway? (y/N): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
fi

# Check commit message length
if [ ${#COMMIT_MSG} -gt 100 ]; then
  echo "‚ö†Ô∏è  Commit message is quite long (${#COMMIT_MSG} characters)"
  echo "üí° Consider keeping the first line under 72 characters for better readability"
  echo ""
  read -p "Continue anyway? (y/N): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
fi

echo "‚úÖ Commit message validation passed!" 